
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Дата = ТекущаяДата();
	ВидРасписания = Перечисления.ВидыРасписанийПланировщика.День;
	ИнициализироватьПланировщик();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ИнициализироватьПланировщик();
КонецПроцедуры


&НаСервере
Процедура ОбновитьДанныеПланировщика()
	
	ЭлементыПланировщика = Планировщик.Элементы;
	ЭлементыПланировщика.Очистить();
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлючевыеЗадачи.Ссылка КАК Ссылка,
	|	КлючевыеЗадачи.Дата КАК Дата,
	|	КлючевыеЗадачи.Цвет КАК Цвет,
	|	КлючевыеЗадачи.ОписаниеЭтапа КАК Описание,
	|	КлючевыеЗадачи.Цель КАК Цель,
	|	КлючевыеЗадачи.ДатаОкончания КАК ДатаОкончания,
	|	КлючевыеЗадачи.Коментарий КАК Коментарий,
	|	КлючевыеЗадачи.Этап КАК Этап,
	|	КлючевыеЗадачи.Название КАК Название
	|ИЗ
	|	Документ.КлючевыеЗадачи КАК КлючевыеЗадачи
	|ГДЕ
	|	НЕ КлючевыеЗадачи.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НовыйЭлемент = ЭлементыПланировщика.Добавить(ВыборкаДетальныеЗаписи.Дата,ВыборкаДетальныеЗаписи.ДатаОкончания);
		НовыйЭлемент.Текст = ВыборкаДетальныеЗаписи.Название;
		ЦветФона = ВыборкаДетальныеЗаписи.Цвет.Получить();
		Если НЕ ЦветФона = Неопределено Тогда		
			НовыйЭлемент.ЦветФона = ЦветФона;		
		КонецЕсли;			
		НовыйЭлемент.Картинка = БиблиотекаКартинок.Ресурс;
		НовыйЭлемент.Значение = ВыборкаДетальныеЗаписи.Ссылка;
		НовыйЭлемент.Подсказка = ВыборкаДетальныеЗаписи.Название + Символы.ПС + Символы.ПС +"Цель: " + Строка(ВыборкаДетальныеЗаписи.Цель) +Символы.ПС + Символы.ПС + ВыборкаДетальныеЗаписи.Описание + Символы.ПС + Символы.ПС + ВыборкаДетальныеЗаписи.Коментарий;
		Соответствие = Новый Соответствие;
		Соответствие.Вставить("Цели",ВыборкаДетальныеЗаписи.Цель);
		НовыйЭлемент.ЗначенияИзмерений = Новый ФиксированноеСоответствие(Соответствие);	
	КонецЦикла;
	
	
КонецПроцедуры // ()


&НаСервере
Процедура ИнициализироватьПланировщик()
	
	
	
	Если ВидРасписания = Перечисления.ВидыРасписанийПланировщика.День  Тогда
	 	ЗадатьНастройкиПериода_День();	
	ИначеЕсли ВидРасписания = Перечисления.ВидыРасписанийПланировщика.Неделя Тогда 
		ЗадатьНастройкиПериода_Неделя();	
	КонецЕсли;
	
	
	//Заполнить цели
	ОбновитьДанныеПланировщика();
	
	
КонецПроцедуры // ИнициализироватьПланировщик()




&НаСервере
Функция ПолучитьСписокЦелей()
	СписокЦелей = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Цели.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Цели КАК Цели
	|ГДЕ
	|	Цели.Активна
	|	И НЕ Цели.Достигнута";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокЦелей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	
	Возврат СписокЦелей;
	
	
КонецФункции // ()

&НаСервере
Процедура ЗадатьНастройкиПериода_День()
	
	//Дата = ТекущаяДата();
	
	//Если НЕ Планировщик.Измерения.Количество() Тогда
	//	
	//Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
	//НоваяШкалаВремени = Планировщик.ШкалаВремени.Элементы.Добавить();
	//НоваяШкалаВремени.Единица = ТипЕдиницыШкалыВремени.День;
	//НоваяШкалаВремени.Кратность = 1;
	//НоваяШкалаВремени.ФорматДня = ФорматДняШкалыВремени.ДеньНедели;
	//НоваяШкалаВремени.Формат =   "ДФ=дддд";

	//	
	//
	//КонецЕсли;
	Элементы.Дата.Вид = ВидПоляФормы.ПолеНадписи;
	
	СписокЦелей = ПолучитьСписокЦелей();
	
	
	
	Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
	ЭлементШкалы = Планировщик.ШкалаВремени.Элементы.Получить(0);
	ЭлементШкалы.Единица = ТипЕдиницыШкалыВремени.Час;
	ЭлементШкалы.Кратность =1;
	
	Планировщик.ОтображатьТекущуюДату = Истина;
	Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
	Планировщик.КратностьПериодическогоВарианта = 24;
	Планировщик.ОтступСНачалаПереносаШкалыВремени = 6;
	Планировщик.ОтступСКонцаПереносаШкалыВремени = 2;
	Планировщик.ВыравниватьГраницыЭлементовПоШкалеВремени = Ложь;
	Планировщик.ОтображатьПеренесенныеЗаголовки = Истина;
	Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.ВремяНачалаИКонца;
	Планировщик.ПоведениеЭлементовПриНедостаткеМеста = ПоведениеЭлементовПланировщикаПриНедостаткеМеста.СворачиватьЭлементы;
	Планировщик.АвтоМинимальнаяШиринаКолонки = Ложь;
	Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени =  "ДФ='дддд, д ММММ гггг'";
	
	Планировщик.ТекущиеПериодыОтображения.Очистить();
	Планировщик.ТекущиеПериодыОтображения.Добавить(НачалоДня(Дата),  КонецДня((Дата)));
	
	//Измерения вверху, они же цели
	Планировщик.Измерения.Очистить();
	
	НовоеИзмерение = Планировщик.Измерения.Добавить("Цели");		
	Для каждого Цель Из СписокЦелей Цикл			
		ЭлементИзмерения = НовоеИзмерение.Элементы.Добавить(Цель.Значение);
		//ЭлементИзмерения.Значение = Цель;
		ЭлементИзмерения.Текст = Цель.Значение.Наименование;			
	КонецЦикла;
	////
	
	
	//Застолбим обеденное время
	//Планировщик.ИнтервалыФона.Очистить();
	//НовыйИнтервалФона = Планировщик.ИнтервалыФона.Добавить();
	//НовыйИнтервалФона.МеткиНачало = Дата
	//
	
	
	

КонецПроцедуры


&НаСервере
Процедура ЗадатьНастройкиПериода_Неделя()
	
	Элементы.Дата.Вид = ВидПоляФормы.ПолеКалендаря;
	Элементы.Дата.ШиринаВМесяцах = 1;
	Элементы.Дата.ВысотаВМесяцах = 1;
	Элементы.Дата.НачалоПериодаОтображения = НачалоМесяца(Дата);
	Элементы.Дата.КонецПериодаОтображения = КонецМесяца(Дата);
	Элементы.Дата.МаксимальнаяВысота = 1;
	Элементы.Дата.МаксимальнаяШирина = 1;
	Элементы.Дата.АвтоМаксимальнаяШирина = Истина;
	Элементы.Дата.ТолькоПросмотр = Истина;
//	
//	Если НЕ Планировщик.Измерения.Количество() Тогда
//		
//	Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;
//	НоваяШкалаВремени = Планировщик.ШкалаВремени.Элементы.Добавить();
//	НоваяШкалаВремени.Единица = ТипЕдиницыШкалыВремени.День;
//	НоваяШкалаВремени.Кратность = 7;
//	НоваяШкалаВремени.ФорматДня = ФорматДняШкалыВремени.ДеньНедели;
//	НоваяШкалаВремени.Формат =   "ДФ=дддд";

//		
//	
//КонецЕсли;

СписокЦелей = ПолучитьСписокЦелей();

//Планировщик.ОтображатьТекущуюДату = Истина;
Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Неделя;
Планировщик.КратностьПериодическогоВарианта = 2;
Планировщик.КонецПериодаОтображения = КонецМесяца(Дата);
//Планировщик.НачалоПериодаОтображения = НачалоНедели(Дата);
ЭлементШкалыВремени = Планировщик.ШкалаВремени.Элементы.Получить(0);
ЭлементШкалыВремени.Единица = ТипЕдиницыШкалыВремени.Час;
ЭлементШкалыВремени.Кратность =1;
ЭлементШкалыВремени.ОтображатьПериодическиеМетки = Истина;
Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;

//Планировщик.ОтступСНачалаПереносаШкалыВремени = 6;
//Планировщик.ОтступСКонцаПереносаШкалыВремени = 2;
//Планировщик.ВыравниватьГраницыЭлементовПоШкалеВремени = Истина;
//Планировщик.ОтображатьПеренесенныеЗаголовки = Истина;
//Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени =  "ДФ='дддд, д ММММ гггг'";

Планировщик.ТекущиеПериодыОтображения.Очистить();
Планировщик.ТекущиеПериодыОтображения.Добавить(НачалоНедели(Дата),  КонецМесяца((Дата)));

	//Измерения вверху, они же цели
	Планировщик.Измерения.Очистить();
	
	//НовоеИзмерение = Планировщик.Измерения.Добавить("Цели");		
	//Для каждого Цель Из СписокЦелей Цикл			
	//	ЭлементИзмерения = НовоеИзмерение.Элементы.Добавить(Цель.Значение);
	//	//ЭлементИзмерения.Значение = Цель;
	//	ЭлементИзмерения.Текст = Цель.Значение.Наименование;			
	//КонецЦикла;

	

КонецПроцедуры // ()

&НаКлиенте
Процедура Вправо(Команда)
	КнопкаВправоНаСервере();
КонецПроцедуры


&НаСервере
Процедура КнопкаВправоНаСервере()
	
	Если ВидРасписания = Перечисления.ВидыРасписанийПланировщика.День  Тогда	
		Дата = КонецДня(Дата)+1;	
	ИначеЕсли ВидРасписания = Перечисления.ВидыРасписанийПланировщика.Неделя Тогда 	
		Дата = НачалоНедели(КонецНедели(Дата) +1);	
	КонецЕсли;
	
	ИнициализироватьПланировщик();
	
	
КонецПроцедуры // ()

&НаКлиенте
Процедура Влево(Команда)
	КнопкаВлевоНаСервере();
КонецПроцедуры


&НаСервере
Процедура КнопкаВлевоНаСервере()
	
	Если ВидРасписания = Перечисления.ВидыРасписанийПланировщика.День  Тогда	
		Дата = НачалоДня(Дата)-1;	
	ИначеЕсли ВидРасписания = Перечисления.ВидыРасписанийПланировщика.Неделя Тогда 	
		Дата = НачалоНедели(НачалоНедели(Дата) -1);	
	КонецЕсли;
	ИнициализироватьПланировщик();
	
	
КонецПроцедуры // ()



&НаКлиенте
Процедура ВидРасписанияПриИзменении(Элемент)
	ИнициализироватьПланировщик();
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриСменеТекущегоПериодаОтображения(Элемент, ТекущиеПериодыОтображения, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры


&НаКлиенте
Процедура ДатаПриАктивизацииДаты(Элемент)
	Дата = Элемент;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикВыбор(Элемент, СтандартнаяОбработка)	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура("Ключ",Элемент.ВыделенныеЭлементы.Получить(0).Значение);
	ОткрытьФорму("Документ.КлючевыеЗадачи.Форма.ФормаДокумента",ПараметрыОткрытия);
КонецПроцедуры


&НаСервере
Процедура ПланировщикВыборНаСервере()

	//ПланировщикОбъект = ДанныеФормыВЗначение("Планировщик",Тип("Планировщик"));
	

КонецПроцедуры // ()

&НаСервере
Процедура ПланировщикПеретаскиваниеНаСервере(Ссылка)
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Дата, Значения)
	ПланировщикПеретаскиваниеНаСервере(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	а=1;
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ппп=4;
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	ЭлементПланировщика = Элемент.ВыделенныеЭлементы.Получить(0);
	
	Если ЭлементПланировщика.Значение = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
		СтруктураОтбора = Новый Структура("Цель",ЭлементПланировщика.ЗначенияИзмерений.Получить("Цели"));
		ПараметрыФормы.Вставить("Отбор",СтруктураОтбора);
		ПараметрыФормы.Вставить("РежимВыбора",Истина);
		
		ОбработкаВыбора = Новый ОписаниеОповещения("ПриЗакрытииФормыВыбора", ЭтаФорма,ЭлементПланировщика);
		
		//ВыбранныйЭтап = ОткрытьФорму("Справочник.Этапы.Форма.ФормаВыбора",СтруктураОтбора);
		
		ОткрытьФорму("Справочник.Этапы.Форма.ФормаВыбора",ПараметрыФормы,
		ЭтаФорма, , , , ОбработкаВыбора);
	ИначеЕсли ВремяИзмененоНаСервере(ЭлементПланировщика.Начало,ЭлементПланировщика.Конец,ЭлементПланировщика.Значение) Тогда //Изменили время 
		 ИзменитьВремяНаСервере(ЭлементПланировщика.Начало,ЭлементПланировщика.Конец,ЭлементПланировщика.Значение);
	КонецЕсли; 
	
КонецПроцедуры


&НаКлиенте
Процедура ПриЗакрытииФормыВыбора(Значение, ЭлементПланировщика)  Экспорт 
	
	ОтменаРедактирования = ОбработатьПеретаскиваниеЭлементаНаСервере(ЭлементПланировщика.Значение,ЭлементПланировщика.Начало,ЭлементПланировщика.Конец,ЭлементПланировщика.ЗначенияИзмерений.Получить("Цели"),ЭлементПланировщика.Текст,Значение);
	
	ИнициализироватьПланировщик();
	
КонецПроцедуры // ()


&НаСервере
Процедура ИзменитьВремяНаСервере(ДатаНачала,ДатаОкончания,Ссылка)	
	ОбъектДокументаКлючевыеЗадачи = Ссылка.ПолучитьОбъект();
	ОбъектДокументаКлючевыеЗадачи.Дата = ДатаНачала;
	ОбъектДокументаКлючевыеЗадачи.ДатаОкончания = ДатаОкончания;
	ОбъектДокументаКлючевыеЗадачи.Записать(РежимЗаписиДокумента.Проведение);
КонецПроцедуры // ()


&НаСервере
Функция ВремяИзмененоНаСервере(ДатаНачала,ДатаОкончания,Ссылка)

	Результат  = Ложь;
	
	Если НЕ ДатаНачала = Ссылка.Дата ИЛИ НЕ ДатаОкончания = Ссылка.ДатаОкончания  Тогда	
		Результат = Истина;	
	КонецЕсли;
	
	Возврат Результат;
	

КонецФункции // ()

&НаСервере
Функция  ОбработатьПеретаскиваниеЭлементаНаСервере(Ссылка,Начало,Конец,Цель,Текст,Этап = Неопределено)
	
	ОтменаРедактирования = Ложь;
	
	Если НЕ Ссылка =Неопределено Тогда
		Если Не Ссылка.Цель = Цель Тогда					
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Нельзя менять цель интерактивно!";
			//Сообщение.Поле = "Планировщик";
			//Сообщение.УстановитьДанные(Объект);
			Сообщение.Сообщить();
			ОтменаРедактирования = Истина;
		КонецЕсли;
		
		Если НЕ Ссылка.Дата = Начало ИЛИ НЕ Ссылка.ДатаОкончания = Конец Тогда
			ДокументОбъект = Ссылка.ПолучитьОбъект();
			ДокументОбъект.Дата = Начало;
			ДокументОбъект.ДатаОкончания = Конец;
			ДокументОбъект.Статус = Перечисления.СтатусыЗадач.Запланированная;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);		
		КонецЕсли;
		
	Иначе// новое событие создаём документ
		
		НовыйДокумент = Документы.КлючевыеЗадачи.СоздатьДокумент();
		НовыйДокумент.Дата = Начало;
		НовыйДокумент.ДатаОкончания = Конец;
		НовыйДокумент.Цель = Цель;
		НовыйДокумент.Название = Текст;
		НовыйДокумент.Основание = Этап;
		НовыйДокумент.Этап = Этап;
		НовыйДокумент.НаследоватьЦветЦели = Истина;
		НовыйДокумент.Цвет = Цель.Цвет;
		НовыйДокумент.Статус = Перечисления.СтатусыЗадач.Запланированная;
		
		Попытка
		
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не удалось создать документ задачи!";
			Сообщение.Сообщить();
			ОтменаРедактирования = Истина;
			
		КонецПопытки;
		
		
		
	КонецЕсли;
	
	Возврат ОтменаРедактирования;
КонецФункции // ()

&НаСервере
Функция  ПланировщикПередУдалениемНаСервере(Ссылка)

	Результат = Ложь;
	
	Попытка	
		Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);	
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось удалить задачу!";
		Сообщение.Сообщить();
		Результат = Истина;
	КонецПопытки;
		
	Возврат Результат;
	
	
КонецФункции

&НаКлиенте
Процедура ПланировщикПередУдалением(Элемент, Отказ)
	ЭлементПланировщика = Элемент.ВыделенныеЭлементы.Получить(0);
	Отказ = ПланировщикПередУдалениемНаСервере(ЭлементПланировщика.Значение);
	ИнициализироватьПланировщик();
КонецПроцедуры


