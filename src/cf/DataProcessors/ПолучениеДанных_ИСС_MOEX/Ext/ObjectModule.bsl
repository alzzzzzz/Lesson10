#Если НЕ МобильноеПриложениеСервер И НЕ МобильноеПриложениеКлиент Тогда
&НаСервере
Функция  ПолучитьДанныеОбИнструментах_MOEX() Экспорт 
	
	ОчиститьСтруктурыХранения();
	
	СтруктураВозврата = Новый Структура("СообщениеОбОшибке,Результат");
	
	//Грузим структуру фьючерсов
	ТаблицаКомпонентовURL = ПолучитьТаблицуКомпонентовURLДляСтруктурыТаблицФьючерсов();
	ЗагрузитьСтруктуруТаблиц(ТаблицаКомпонентовURL,СтруктураВозврата);

	
	//Грузим данные фьючерсов
	ТаблицаКомпонентовURL = ПолучитьТаблицуКомпонентовURLДляФьючерсов();		
	ЗагрузитьДанные(ТаблицаКомпонентовURL,СтруктураВозврата);	
	
	
	//Грузим структуру Акций
	ТаблицаКомпонентовURL = ПолучитьТаблицуКомпонентовURLДляСтруктурыТаблицАкций();
	ЗагрузитьСтруктуруТаблиц(ТаблицаКомпонентовURL,СтруктураВозврата);

	
	
	ТаблицаКомпонентовURL = ПолучитьТаблицуКомпонентовURLДляАкций(); 	
	ЗагрузитьДанные(ТаблицаКомпонентовURL,СтруктураВозврата);
	
	
	
	Если СтруктураВозврата.Результат Тогда	

		ОбновитьСправочникИнструментов(СтруктураВозврата);	
	КонецЕсли;
	
	
	
	
	Возврат СтруктураВозврата;
	
	
КонецФункции

// Загружает данные в допреквизиты с портала MOEX по идентификатору(Только фьючерсы)
//
// Параметры:
//  ИдентификаторИнструмента  - SECID
&НаСервере
Функция ПолучитьДанныеПоИнструменту_MOEX(ИдентификаторИнструмента,СтруктураВозврата = Неопределено) Экспорт 
	
	ОчиститьСтруктурыХранения();
	Если СтруктураВозврата = Неопределено Тогда		
		СтруктураВозврата = Новый Структура("СообщениеОбОшибке,Результат");		
		СтруктураВозврата.Результат = Ложь;
	КонецЕсли;
	
	//Грузим структуру фьючерсов
	ТаблицаКомпонентовURL = ПолучитьТаблицуКомпонентовURLДляСтруктурыТаблицФьючерсов();
	ЗагрузитьСтруктуруТаблиц(ТаблицаКомпонентовURL,СтруктураВозврата);
	
	
	//Грузим данные фьючерсов
	ТаблицаКомпонентовURL = ПолучитьТаблицуКомпонентовURLДляФьючерсаПоИдентификатору(ИдентификаторИнструмента);		
	ЗагрузитьДанные(ТаблицаКомпонентовURL,СтруктураВозврата);	
	
	
	
	Если СтруктураВозврата.Результат Тогда	
		ОбновитьСправочникИнструментов(СтруктураВозврата);	
	КонецЕсли;
	
	
	
	
	Возврат СтруктураВозврата;
	

КонецФункции // ПолучитьДанныеПоИнструменту_MOEX()


&НаСервере
Функция  ОбновитьСправочникИнструментов(СтруктураВозврата)  
	
	СтруктураВозврата.Результат = Ложь;
	
	Если  ДанныеФьючерсов.Количество() Тогда
		Для каждого Строка Из ДанныеФьючерсов Цикл
			
			СправочникОбъект = 	ПолучитьОбъектСправочникаИнструментыПоНаименованию(Строка.shortname);	
			СправочникОбъект.Наименование = Строка.shortname;
			СправочникОбъект.Родитель = ПолучитьСоздатьРодителяСправочникаИнструментыПоНаименованию(
			Строка.assetcode,Справочники.Инструменты.Фьючерсы);
			СправочникОбъект.ДатаОбновления = ТекущаяДата();
			Попытка
				СправочникОбъект.Записать();    
				НоваяСтрокаТЧИнструменты = ЗагруженныеИнструменты.Добавить();
				НоваяСтрокаТЧИнструменты.Инструмент = СправочникОбъект.Ссылка;
				НоваяСтрокаТЧИнструменты.ТипИнструмента = Перечисления.ТипИнструмента.ФьючерсныйКонтракт;
			Исключение
				Ошибка = ОписаниеОшибки();
				#Если НЕ МобильноеПриложениеСервер И НЕ МобильноеПриложениеКлиент Тогда
					ЗаписьЖурналаРегистрации(Ошибка,
					УровеньЖурналаРегистрации.Ошибка);
				#КонецЕсли
				СтруктураВозврата.СообщениеОбОшибке = "Ошибка записи элемента справочника ""Инструменты"" В группе ""Фьючерсов""!Подробная информация внесена в журнал регистрации.";
				Возврат СтруктураВозврата;	
			КонецПопытки;
						
			//Заполним допреквизиты
			Счетчик = 0;
			Для каждого Колонка Из ДанныеФьючерсов.Колонки Цикл
				
				ЗаполнитьДопреквизит(СправочникОбъект,Колонка.Имя,Строка[Колонка.Имя],Колонка.ТипЗначения,УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Инструменты_Фьючерсы"));		
				Счетчик = Счетчик +1;
			КонецЦикла;
			
			
			
		КонецЦикла;
	КонецЕсли;   
	
	СоздатьФьючерсыСклейки();
	
	Если  ДанныеАкций.Количество() Тогда 
		
		Для каждого Строка Из ДанныеАкций Цикл
			СправочникОбъект = 	ПолучитьОбъектСправочникаИнструментыПоНаименованию(Строка.shortname);	
			СправочникОбъект.Наименование = Строка.shortname;
			СправочникОбъект.Родитель = Справочники.Инструменты.Акции;
			
			Попытка
				СправочникОбъект.Записать(); 
				НоваяСтрокаТЧИнструменты = ЗагруженныеИнструменты.Добавить();
				НоваяСтрокаТЧИнструменты.Инструмент = СправочникОбъект.Ссылка;
				НоваяСтрокаТЧИнструменты.ТипИнструмента = Перечисления.ТипИнструмента.Акция;
			Исключение
				Ошибка = ОписаниеОшибки();
				#Если НЕ МобильноеПриложениеСервер И НЕ МобильноеПриложениеКлиент Тогда
				ЗаписьЖурналаРегистрации(Ошибка,
				УровеньЖурналаРегистрации.Ошибка);		
				#КонецЕсли
				СтруктураВозврата.СообщениеОбОшибке = "Ошибка записи элемента справочника ""Инструменты""В группе ""Акций""!Подробная информация внесена в журнал регистрации.";
				Возврат СтруктураВозврата;	
			КонецПопытки;
			
				
			//Заполним допреквизиты
			Счетчик = 0;
			Для каждого Колонка Из ДанныеАкций.Колонки Цикл
				
				ЗаполнитьДопреквизит(СправочникОбъект,Колонка.Имя,Строка[Колонка.Имя],Колонка.ТипЗначения,УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Инструменты_Акции"));		
				Счетчик = Счетчик +1;
			КонецЦикла;
			
	
			
		КонецЦикла;
	КонецЕсли;
	Если  ДанныеОблигаций.Количество() Тогда 
		
		Для каждого Строка Из ДанныеОблигаций Цикл
			СправочникОбъект = 	ПолучитьОбъектСправочникаИнструментыПоНаименованию(Строка.shortname);	
			СправочникОбъект.Наименование = Строка.shortname;
			СправочникОбъект.Родитель = Справочники.Инструменты.Облигации ;
			
			Попытка
				СправочникОбъект.Записать(); 
				НоваяСтрокаТЧИнструменты = ЗагруженныеИнструменты.Добавить();
				НоваяСтрокаТЧИнструменты.Инструмент = СправочникОбъект.Ссылка;
				НоваяСтрокаТЧИнструменты.ТипИнструмента = Перечисления.ТипИнструмента.Облигация;
			Исключение
				Ошибка = ОписаниеОшибки();
				#Если НЕ МобильноеПриложениеСервер И НЕ МобильноеПриложениеКлиент Тогда
					ЗаписьЖурналаРегистрации(Ошибка,
					УровеньЖурналаРегистрации.Ошибка);		
				#КонецЕсли
				СтруктураВозврата.СообщениеОбОшибке = "Ошибка записи элемента справочника ""Инструменты""В группе ""Облигаций""!Подробная информация внесена в журнал регистрации.";
				Возврат СтруктураВозврата;	
			КонецПопытки;
			
			//Заполним допреквизиты
			Счетчик = 0;
			Для каждого Колонка Из ДанныеОблигаций.Колонки Цикл
				
				ЗаполнитьДопреквизит(СправочникОбъект,Колонка.Имя,Строка[Колонка.Имя],Колонка.ТипЗначения,УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Инструменты_Облигации"));		
				Счетчик = Счетчик +1;
			КонецЦикла;
			
	
			
		КонецЦикла;
		
		
		
		
	КонецЕсли;
	
	СтруктураВозврата.Результат = Истина;
	Возврат СтруктураВозврата;
	
КонецФункции



//Приводит строку вида гггг-мм-дд к типу Дата
Функция ПривестиКТипуДата(СтрокаДата)
	Год = Лев(СтрокаДата,4);
	Месяц = Сред(СтрокаДата,6,2);
	День = Прав(СтрокаДата,2);	
	Возврат Дата(Год,Месяц,День);
КонецФункции // ()

Функция ПолучитьОбъектСправочникаИнструментыПоНаименованию(shortname)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Инструменты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Инструменты КАК Инструменты
	|ГДЕ
	|	Инструменты.Наименование = &shortname
	|	И НЕ Инструменты.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("shortname", shortname);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
	КонецЦикла;
	
	Возврат Справочники.Инструменты.СоздатьЭлемент();
	
КонецФункции // ()


Функция ПолучитьСоздатьРодителяСправочникаИнструментыПоНаименованию(Наименование,ПредопределеннаяГруппа)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Инструменты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Инструменты КАК Инструменты
	|ГДЕ
	|	Инструменты.Наименование = &Наименование
	|	И Инструменты.Родитель = &Родитель";
	
	Запрос.УстановитьПараметр("Наименование", СокрЛП(Наименование));
	Запрос.УстановитьПараметр("Родитель", ПредопределеннаяГруппа);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	СправочникОбъект =  Справочники.Инструменты.СоздатьГруппу();	
	СправочникОбъект.Наименование = СокрЛП(Наименование);
	СправочникОбъект.Родитель = ПредопределеннаяГруппа;
	СправочникОбъект.Записать();
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции // ()


Процедура СоздатьФьючерсыСклейки()
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Инструменты.Наименование КАК Наименование,
		|	Инструменты.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	Справочник.Инструменты КАК Инструменты
		|ГДЕ
		|	Инструменты.Ссылка В ИЕРАРХИИ(&Ссылка)
		|	И Инструменты.ЭтоГруппа = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.Ссылка КАК Родитель,
		|	Инструменты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Инструменты КАК Инструменты
		|		ПРАВОЕ СОЕДИНЕНИЕ ВТ КАК ВТ
		|		ПО (ВТ.Наименование + ""Splice"" ПОДОБНО Инструменты.Наименование)";
	
	Запрос.УстановитьПараметр("Ссылка", Справочники.Инструменты.Фьючерсы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Ссылка = Null Тогда    
			ЭлементСклейка = Справочники.Инструменты.СоздатьЭлемент();
			ЭлементСклейка.Родитель = ВыборкаДетальныеЗаписи.Родитель;
			ЭлементСклейка.Наименование = ВыборкаДетальныеЗаписи.Родитель.Наименование + "Splice";
			ЭлементСклейка.Записать();		
		КонецЕсли;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
	
	
КонецПроцедуры


Функция ПолучитьТаблицуКомпонентовURLДляФьючерсов()
	
	ТаблицаКомпонентовURL = Новый ТаблицаЗначений;
	ТаблицаКомпонентовURL.Колонки.Добавить("Назначение");
	ТаблицаКомпонентовURL.Колонки.Добавить("Параметр1");
	ТаблицаКомпонентовURL.Колонки.Добавить("Параметр2");
	ТаблицаКомпонентовURL.Колонки.Добавить("Параметр3");
	ТаблицаКомпонентовURL.Колонки.Добавить("Параметр4");
	ТаблицаКомпонентовURL.Колонки.Добавить("Параметр5");
	ТаблицаКомпонентовURL.Колонки.Добавить("Параметр6");
	
	//Запрос фючерсов
	НоваяСтрока = ТаблицаКомпонентовURL.Добавить();
	
	НоваяСтрока.Назначение = "Фьючерсы";
	НоваяСтрока.Параметр1 = "iss";
	НоваяСтрока.Параметр2 = "engines";
	НоваяСтрока.Параметр3 = "futures";
	НоваяСтрока.Параметр4 = "markets";
	НоваяСтрока.Параметр5 = "forts";
	НоваяСтрока.Параметр6 = "securities.xml";
	
	Возврат ТаблицаКомпонентовURL;
	
КонецФункции // ()

Функция ПолучитьТаблицуКомпонентовURLДляФьючерсаПоИдентификатору(ИдентификаторИнструмента)
	
	ТаблицаКомпонентовURL = Новый ТаблицаЗначений;
	ТаблицаКомпонентовURL.Колонки.Добавить("Назначение");
	ТаблицаКомпонентовURL.Колонки.Добавить("Параметр1");
	ТаблицаКомпонентовURL.Колонки.Добавить("Параметр2");
	ТаблицаКомпонентовURL.Колонки.Добавить("Параметр3");
	ТаблицаКомпонентовURL.Колонки.Добавить("Параметр4");
	ТаблицаКомпонентовURL.Колонки.Добавить("Параметр5");
	ТаблицаКомпонентовURL.Колонки.Добавить("Параметр6");
	ТаблицаКомпонентовURL.Колонки.Добавить("Параметр7");
	ТаблицаКомпонентовURL.Колонки.Добавить("Параметр8");

	//Запрос фючерсов
	НоваяСтрока = ТаблицаКомпонентовURL.Добавить();
	
	НоваяСтрока.Назначение = "Фьючерсы";
	НоваяСтрока.Параметр1 = "iss";
	НоваяСтрока.Параметр2 = "engines";
	НоваяСтрока.Параметр3 = "futures";
	НоваяСтрока.Параметр4 = "markets";
	НоваяСтрока.Параметр5 = "forts";
	НоваяСтрока.Параметр6 = "securities";
	НоваяСтрока.Параметр7 = ИдентификаторИнструмента;
	НоваяСтрока.Параметр8 = "securities.xml";
	
	Возврат ТаблицаКомпонентовURL;
	
КонецФункции // ()



Функция ПолучитьТаблицуКомпонентовURLДляСтруктурыТаблицФьючерсов()

	  	ТаблицаКомпонентовURL = Новый ТаблицаЗначений;
	ТаблицаКомпонентовURL.Колонки.Добавить("Назначение");
	ТаблицаКомпонентовURL.Колонки.Добавить("Параметр1");
	ТаблицаКомпонентовURL.Колонки.Добавить("Параметр2");
	ТаблицаКомпонентовURL.Колонки.Добавить("Параметр3");
	ТаблицаКомпонентовURL.Колонки.Добавить("Параметр4");
	ТаблицаКомпонентовURL.Колонки.Добавить("Параметр5");
	ТаблицаКомпонентовURL.Колонки.Добавить("Параметр6");
	
	//Запрос фючерсов
	НоваяСтрока = ТаблицаКомпонентовURL.Добавить();
	
	НоваяСтрока.Назначение = "СтруктураТаблицыФьючерсов";
	НоваяСтрока.Параметр1 = "iss";
	НоваяСтрока.Параметр2 = "engines";
	НоваяСтрока.Параметр3 = "futures";
	НоваяСтрока.Параметр4 = "markets";
	НоваяСтрока.Параметр6 = "forts.xml";
	
	Возврат ТаблицаКомпонентовURL;

	

КонецФункции // ()

Функция ПолучитьТаблицуКомпонентовURLДляСтруктурыТаблицАкций()

	  	ТаблицаКомпонентовURL = Новый ТаблицаЗначений;
	ТаблицаКомпонентовURL.Колонки.Добавить("Назначение");
	ТаблицаКомпонентовURL.Колонки.Добавить("Параметр1");
	ТаблицаКомпонентовURL.Колонки.Добавить("Параметр2");
	ТаблицаКомпонентовURL.Колонки.Добавить("Параметр3");
	ТаблицаКомпонентовURL.Колонки.Добавить("Параметр4");
	ТаблицаКомпонентовURL.Колонки.Добавить("Параметр5");
	ТаблицаКомпонентовURL.Колонки.Добавить("Параметр6");
	
	//Запрос фючерсов
	НоваяСтрока = ТаблицаКомпонентовURL.Добавить();
	
	НоваяСтрока.Назначение = "СтруктураТаблицыАкций";
	НоваяСтрока.Параметр1 = "iss";
	НоваяСтрока.Параметр2 = "engines";
	НоваяСтрока.Параметр3 = "stock";
	НоваяСтрока.Параметр4 = "markets";
	НоваяСтрока.Параметр6 = "shares.xml";
	
	Возврат ТаблицаКомпонентовURL;

	

КонецФункции // ()


Функция ПолучитьТаблицуКомпонентовURLДляАкций()
	
	ТаблицаКомпонентовURL = Новый ТаблицаЗначений;
	ТаблицаКомпонентовURL.Колонки.Добавить("Назначение");
	ТаблицаКомпонентовURL.Колонки.Добавить("Параметр1");
	ТаблицаКомпонентовURL.Колонки.Добавить("Параметр2");
	ТаблицаКомпонентовURL.Колонки.Добавить("Параметр3");
	ТаблицаКомпонентовURL.Колонки.Добавить("Параметр4");
	ТаблицаКомпонентовURL.Колонки.Добавить("Параметр5");
	ТаблицаКомпонентовURL.Колонки.Добавить("Параметр6");
	
	
	НоваяСтрока = ТаблицаКомпонентовURL.Добавить();
	
	НоваяСтрока.Назначение = "Акции";
	НоваяСтрока.Параметр1 = "iss";
	НоваяСтрока.Параметр2 = "engines";
	НоваяСтрока.Параметр3 = "stock";
	НоваяСтрока.Параметр4 = "markets";
	НоваяСтрока.Параметр5 = "shares";
	НоваяСтрока.Параметр6 = "securities.xml";
	
	Возврат ТаблицаКомпонентовURL;
	
КонецФункции // ()



Процедура  ЗагрузитьДанные(ТаблицаКомпонентовURL,СтруктураВозврата)
	СтруктураВозврата.Результат = Ложь;
	
	КорневойURL = "iss.moex.com";
	
	стрРезультат = ВыполнитьHTTPЗапрос(КорневойURL,ТаблицаКомпонентовURL);
	
	Если стрРезультат.Результат Тогда
		
		Для каждого  Строка Из стрРезультат.Данные Цикл
			
			
			//Создадим чтение XML
			
			ЧтениеXML = Новый ЧтениеXML();
			ЧтениеXML.УстановитьСтроку(Строка.Значение);
			
			
			ДанныеФайла = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			
			Попытка	
				Данные = ДанныеФайла.data.Получить(0);
				Строки = Данные.Получить("rows");
			Исключение
				Ошибка = ОписаниеОшибки();
				#Если НЕ МобильноеПриложениеСервер И НЕ МобильноеПриложениеКлиент Тогда
				ЗаписьЖурналаРегистрации(Ошибка,
				УровеньЖурналаРегистрации.Ошибка);		
				#КонецЕсли
				СтруктураВозврата.СообщениеОбОшибке = "Ошибка формата файла!Подробная информация внесена в журнал регистрации.";
				СтруктураВозврата = Ложь;
				Возврат ;	
			КонецПопытки;
			
			Если ТаблицаКомпонентовURL[0][0] = "Акции" Тогда
				СтруктураХранения = ДанныеАкций;
			ИначеЕсли ТаблицаКомпонентовURL[0][0] = "Фьючерсы" Тогда 				
				СтруктураХранения = ДанныеФьючерсов;
			ИначеЕсли ТаблицаКомпонентовURL[0][0] = "Облигации" Тогда 
				СтруктураХранения = ДанныеОблигаций;
			КонецЕсли;
			
			//Создание структуры хранения данных
			Для каждого Колонка  Из Данные.metadata.columns.column Цикл
				
				Если Колонка.type = "date" Тогда
					Тип = Новый ОписаниеТипов("Дата");					
				ИначеЕсли Колонка.type = "string" Тогда 
					Тип = Новый ОписаниеТипов("Строка");										
				Иначе 
					Тип = Новый ОписаниеТипов("Число");					
				КонецЕсли;
				
				НоваяКолонка = СтруктураХранения.Колонки.Добавить(Колонка.name,Тип);
				
			КонецЦикла;
			
			
			Если ТипЗнч(Строки.row) = Тип("ОбъектXDTO") Тогда
				НоваяСтрока = СтруктураХранения.Добавить();		
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Строки.row);
				
			Иначе
				//Загрузка данных 	
				Для каждого Инструмент  Из Строки.row Цикл
					
					НоваяСтрока = СтруктураХранения.Добавить();		
					//Для каждого Строка Из НоваяСтрока Цикл
					//	Инструмент[Строка.]
					//	
					//
					//КонецЦикла;
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Инструмент);							
				КонецЦикла;			
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	СтруктураВозврата.Результат = Истина;
	
	
КонецПроцедуры // ()

Процедура  ЗагрузитьСтруктуруТаблиц(ТаблицаКомпонентовURL,СтруктураВозврата)
	СтруктураВозврата.Результат = Ложь;
	
	КорневойURL = "iss.moex.com";
	
	стрРезультат = ВыполнитьHTTPЗапрос(КорневойURL,ТаблицаКомпонентовURL);
	
	Если стрРезультат.Результат Тогда
		
		Для каждого  Строка Из стрРезультат.Данные Цикл
			
			
			//Создадим чтение XML
			
			ЧтениеXML = Новый ЧтениеXML();
			ЧтениеXML.УстановитьСтроку(Строка.Значение);
			
			
			ДанныеФайла = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			
			Для каждого Строка Из ДанныеФайла.data Цикл
				//Получим из списка только данные структуры таблиц
				Если Строка.id = "securities"Тогда
					ДанныеСтруктурыТаблиц = Строка;
				
					Прервать;
				
				КонецЕсли;
				
			
			КонецЦикла;
			
			Попытка
			
				Строки = ДанныеСтруктурыТаблиц.Получить("rows");
			
			Исключение				
				Ошибка = ОписаниеОшибки();
				#Если НЕ МобильноеПриложениеСервер И НЕ МобильноеПриложениеКлиент Тогда
				ЗаписьЖурналаРегистрации(Ошибка,
				УровеньЖурналаРегистрации.Ошибка);		
				#КонецЕсли
				СтруктураВозврата.СообщениеОбОшибке = "Ошибка формата файла!Подробная информация внесена в журнал регистрации.";
				СтруктураВозврата = Ложь;
				Возврат ;	
			
			КонецПопытки;
			
			
			Если ТаблицаКомпонентовURL[0][0] = "СтруктураТаблицыАкций" Тогда
				СтруктураХранения = СтруктураТаблицыАкций;
			ИначеЕсли ТаблицаКомпонентовURL[0][0] = "СтруктураТаблицыФьючерсов" Тогда 				
				СтруктураХранения = СтруктураТаблицыФьючерсов;
			ИначеЕсли ТаблицаКомпонентовURL[0][0] = "СтруктураТаблицыОблигаций" Тогда 
				СтруктураХранения = СтруктураТаблицыОблигаций;
			КонецЕсли;
			
			//Создание структуры хранения данных
			Для каждого Колонка  Из ДанныеСтруктурыТаблиц.metadata.columns.column Цикл
				
				Если Колонка.type = "date" Тогда
					Тип = Новый ОписаниеТипов("Дата");					
				ИначеЕсли Колонка.type = "string" Тогда 
					Тип = Новый ОписаниеТипов("Строка");										
				Иначе 
					Тип = Новый ОписаниеТипов("Число");					
				КонецЕсли;
				
				НоваяКолонка = СтруктураХранения.Колонки.Добавить(Колонка.name,Тип);
				
			КонецЦикла;

			//Загрузка данных 	
			Для каждого Инструмент  Из Строки.row Цикл
				НоваяСтрока = СтруктураХранения.Добавить();				
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Инструмент);							
			КонецЦикла;			
		КонецЦикла;
	КонецЕсли;
	

		
	
	СтруктураВозврата.Результат = Истина;
	
	
КонецПроцедуры // ()

Процедура ОчиститьСтруктурыХранения()
	ДанныеФьючерсов.Очистить();
	ДанныеАкций.Очистить();
	ДанныеОблигаций.Очистить();	
	СтруктураТаблицыАкций.Очистить();
	СтруктураТаблицыОблигаций.Очистить();
	СтруктураТаблицыФьючерсов.Очистить();
КонецПроцедуры

Процедура   ЗаполнитьДопреквизит(ОбъектИнструмент, Наименование,Значение,Тип,Набор)

	Допреквизит = ПолучитьДопреквизитПоНаименованиюИНабору(Наименование,Набор);
	
	//////////УБРАТЬ!! Служебная!! для обновления существующих реквизитов
	//
	//ДопреквизитОбъект =   Допреквизит.ПолучитьОбъект();
	//  
	//  	//Получим расшифровку заголовков
	//	Если Набор.ИмяПредопределенногоНабора = "Справочник_Инструменты_Фьючерсы" Тогда
	//		СтрокаСтруктурыТаблиц = СтруктураТаблицыФьючерсов.Найти(Наименование);
	//		КороткоеНаименование = СтрокаСтруктурыТаблиц.short_title;
	//		ПолноеНаименование =  СтрокаСтруктурыТаблиц.title;
	//		
	//	ИначеЕсли Набор.ИмяПредопределенногоНабора = "Справочник_Инструменты_Акции" Тогда
	//		СтрокаСтруктурыТаблиц = СтруктураТаблицыАкций.Найти(Наименование);
	//		КороткоеНаименование = СтрокаСтруктурыТаблиц.short_title;
	//		ПолноеНаименование =  СтрокаСтруктурыТаблиц.title;
	//		
	//	ИначеЕсли Набор.ИмяПредопределенногоНабора = "Справочник_Инструменты_Облигации" Тогда
	//		
	//		
	//		
	//	КонецЕсли;

	//	ДопреквизитОбъект.Заголовок = КороткоеНаименование;
	//    ДопреквизитОбъект.ЗаголовокФормыВыбораЗначения = ПолноеНаименование;
	//	ДопреквизитОбъект.ЗаголовокФормыЗначения = ПолноеНаименование;

	//	ДопреквизитОбъект.Записать();
	//
	//////////// /////
	//
	
	Если Допреквизит = Неопределено Тогда
		
		//Получим расшифровку заголовков
		Если Набор.ИмяПредопределенногоНабора = "Справочник_Инструменты_Фьючерсы" Тогда
			СтрокаСтруктурыТаблиц = СтруктураТаблицыФьючерсов.Найти(Наименование);
			КороткоеНаименование = СтрокаСтруктурыТаблиц.short_title;
			ПолноеНаименование =  СтрокаСтруктурыТаблиц.title;
			
		ИначеЕсли Набор.ИмяПредопределенногоНабора = "Справочник_Инструменты_Акции" Тогда
			СтрокаСтруктурыТаблиц = СтруктураТаблицыФьючерсов.Найти(Наименование);
			КороткоеНаименование = СтрокаСтруктурыТаблиц.short_title;
			ПолноеНаименование =  СтрокаСтруктурыТаблиц.title;
			
		ИначеЕсли Набор.ИмяПредопределенногоНабора = "Справочник_Инструменты_Облигации" Тогда
			
			
			
		КонецЕсли;
		
		
		
		//Создаем допреквизит
		Допреквизит = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		Допреквизит.Наименование = Наименование;
		Допреквизит.Виден = Истина;
		Допреквизит.Доступен = Истина;
		Допреквизит.Заголовок = КороткоеНаименование;
		Допреквизит.ЗаголовокФормыВыбораЗначения = ПолноеНаименование;
		Допреквизит.ЗаголовокФормыЗначения = ПолноеНаименование;
		Допреквизит.Имя = Наименование;
		Допреквизит.Комментарий = "Загружено автоматически";
		Допреквизит.НаборСвойств = Набор;
		Допреквизит.ТипЗначения = Тип;
		Допреквизит.Записать();
		
		Допреквизит = Допреквизит.Ссылка;
		
		ДопреквизитНабора = Набор.ДополнительныеРеквизиты.Найти(Допреквизит);
		
		Если ДопреквизитНабора = Неопределено Тогда
			НаборОбъект = Набор.ПолучитьОбъект();
			НоваяСтрока =  НаборОбъект.ДополнительныеРеквизиты.Добавить();
			НоваяСтрока.Свойство = Допреквизит;		
			НаборОбъект.Записать();			
		КонецЕсли;
		
		
		
	КонецЕсли;
	
	ТЧДопреквизитов = ОбъектИнструмент.ДополнительныеРеквизиты;
	СтрокаТЧ = ТЧДопреквизитов.Найти(Допреквизит);
	Если СтрокаТЧ = Неопределено  Тогда	
		СтрокаТЧ = ТЧДопреквизитов.Добавить();			
		СтрокаТЧ.Свойство = Допреквизит;		
	КонецЕсли;
	
	СтрокаТЧ.Значение = Значение;
	ОбъектИнструмент.Записать();
	
	
	
КонецПроцедуры

Функция ПолучитьДопреквизитПоНаименованиюИНабору(Наименование,Набор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		|ГДЕ
		|	ДополнительныеРеквизитыИСведения.Наименование = &Наименование
		|	И ДополнительныеРеквизитыИСведения.НаборСвойств = &Набор";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("Набор", Набор);

	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;

	   Возврат Неопределено;
	

КонецФункции // ()


//Выполнить запрос к ИСС биржи
//
//КорневойАдрес - корневой URL
//тчКомпонентыURL - Содержит колонки Назначение, Параметр1,Параметр2....
//Значения строк тчКомпонентыURL - составляющие пути 
//
Функция ВыполнитьHTTPЗапрос(КорневойАдрес,тчКомпонентыURL,тчАргументы = Неопределено)
	
	СтруктураВозврата = Новый Структура("СообщениеОбОшибке,Результат");
	СтруктураВозврата.Результат = Ложь;
	//
	//TODO:Реализовать обработку параметров
	//
	
	Соединение = Новый HTTPСоединение(КорневойАдрес,80);
	
	соотвЗапросы = СформироватьЗапросы(КорневойАдрес,тчКомпонентыURL,тчАргументы);
	
	Для каждого Строка Из соотвЗапросы Цикл
		Попытка		 
			Запрос = Новый HTTPЗапрос(Строка.Значение);
			Ответ = Соединение.ВызватьHTTPМетод("GET",Запрос);
			соотвЗапросы[Строка.Ключ] = Ответ.ПолучитьТелоКакСтроку();
			СтруктураВозврата.Результат = Истина;
			СтруктураВозврата.Вставить("Данные",соотвЗапросы);
		Исключение
			СтруктураВозврата.СообщениеОбОшибке = ОписаниеОшибки();
			Возврат СтруктураВозврата;
		КонецПопытки;		 
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции // ()


Функция СформироватьЗапросы(КорневойАдрес,тчКомпонентыURL,тчАргументы)
	
	
	Запросы = Новый Соответствие;
	
	
	Для каждого Строка Из тчКомпонентыURL Цикл
		Адрес = "";//КорневойАдрес;
		Для Сч=1 По тчКомпонентыURL.Колонки.Количество()-1 Цикл
			Если Не ЗначениеЗаполнено(Строка["Параметр"+Сч]) Тогда
				Продолжить;			
			КонецЕсли;
			Адрес = Адрес + "/" + Строка["Параметр"+Сч];		
		КонецЦикла;	
		Запросы.Вставить(Строка.Назначение,Адрес);	
	КонецЦикла;
	
	
	Возврат Запросы;
	
	
КонецФункции // ()

Функция ОбработатьНаименование(Назначение)
	
	Возврат СтрЗаменить(Назначение," ","");
	
КонецФункции // ()



#КонецЕсли